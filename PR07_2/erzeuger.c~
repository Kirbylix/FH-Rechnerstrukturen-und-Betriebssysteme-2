// Standartheader
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
//Header für IPC
#include <sys/ipc.h>
#include <sys/types.h>
//Header für Semaphore
#include <sys/sem.h>
//Header für die Shared Memorie
#include <sys/shm.h>

#include <sys/stat.h>

#include "sm.h"
#include "pv.h"

//Zugriffsrechte für die SHM & SM
#define PERM 0666

static int shm_anfordid,shm_antwortid;
static int sem_anfordid,sem_antwortid;
static struct sembuf semaphor;


int main(void)
{
	// Variablen
	int neues_wort,client,i;
	anforder_shm	*shm_anford;
	antwort_shm 	*shm_antwort;
	char buf[MAX_LAENGE];

	/******************************** initialisieren *********************************/
	shmdt((char *)shm_anford);
	shmdt((char *)shm_antwort);
	shmctl(shm_anfordid,IPC_RMID,NULL);
	shmctl(shm_antwortid,IPC_RMID,NULL);
	//IPC_CREAT = erstellt ein neues Segment
	//IPC_EXCL = sort im Verbund mit IPC_CREAT für eine Fehlermeldung falls das Segment schon existiert

	/* Anlegen des Shared Memories fuer Anforderungen */
	if((shm_anfordid=shmget(SHM_READKEY, SHM_MAXSAETZE, IPC_CREAT |  IPC_EXCL | 0666)) == -1){
		fprintf(stderr,"Error: Anforderungs shared memory konnte nicht angelegt werden\n");
		exit(-1);
	}

	/* Anbinden des Shared Memories fuer Anforderungen */
	if((shm_anford=(anforder_shm *)shmat(shm_anfordid, NULL, 0))==(void*)-1){
		fprintf(stderr,"Error: Anforderungs shared memory konnte nicht angebunden werden\n");
		exit(-1);
	}

	/* Anlegen des Shared Memories fuer Antworten */
	if((shm_antwortid=shmget(SHM_WRITEKEY, SHM_MAXSAETZE, IPC_CREAT | IPC_EXCL | PERM))==-1){
		fprintf(stderr,"Error: Antwort shared memory konnte nicht angelegt werden\n");
		exit(-1);
	}

	/* Anbinden des Shared Memories fuer Antworten */
	if((shm_antwort=(antwort_shm *)shmat(shm_antwortid, NULL, 0))==(void*)-1){
		fprintf(stderr,"Error: Antwort shared memory konnte nicht angebunden werden\n");
		exit(-1);
	}

    /* Anlegen des Semaphors fuer Anforderungen */
    if((sem_anfordid=semget(SEM_READKEY, 1, IPC_CREAT | IPC_EXCL | PERM))==-1){
           fprintf(stderr,"Error: semaphore (Anforderungen) konnte nicht angelegt werden\n");
           exit(-1);
    }

	/* Setzen des Sempahors fuer Anforderungen auf 1 */
	if(semctl(sem_anfordid,0,SETVAL,(int)1)==-1){
		fprintf(stderr,"Error: semaphore (Anforderungen) konnte nicht gesetzt werden\n");
		exit(-1);
	}

	/* Anlegen des Semaphors fuer Antworten */
	if((sem_antwortid=semget(SEM_WRITEKEY, 1, IPC_CREAT | IPC_EXCL | PERM))==-1){
		fprintf(stderr,"Error: semaphore (Antworten) konnte nicht angelegt werden\n");
		exit(-1);
	}

	/* Setzen des Sempahors fuer Antworten auf 1 */
	if(semctl(sem_antwortid,0,SETVAL,(int)1)==-1){
		fprintf(stderr,"Error: semaphore (Antworten) konnte nicht gesetzt werden\n");
		exit(-1);
	}

	/****************************** Sammeln und Rechnen ************************************/

	while(1)
	{
		neues_wort=0;

		/* Semaphor fuer Anforderungen setzen */
		semaphor.sem_op = -1;
		semaphor.sem_flg=  0;

                /* Anfordern einer Ressource */
                if(semop(sem_anfordid,&semaphor,1)==-1){
                        fprintf(stderr,"Error: semaphore (Anforderungen) konnte nicht dekrementiert werden\n");
                        exit(-1);
                }

		if(shm_anford->ungelesen){
			strcpy(buf,shm_anford->text);
			client = shm_anford->client;
			neues_wort=1;
			shm_anford->ungelesen=0;
		}

		/* Abbruchkriterium client = 1000 */
		if(client == 1000){ 
			sleep(1);
			break;
		}
		
		/* Semaphor fuer Anforderungen freigeben */
		semaphor.sem_op = +1;
		semaphor.sem_flg= 0;

                /* Freigeben einer Ressource */
                if(semop(sem_anfordid,&semaphor,1)==-1){
                        fprintf(stderr,"Error: semaphore (Anforderungen) konnte nicht inkrementiert werden\n");
                        exit(-1);
                }

		if(neues_wort){
			for(i=0;i<strlen(buf);i++)
				buf[i]=toupper(buf[i]);
			buf[i]='\0';

   			/* Semaphor fuer Antworten setzen */
			semaphor.sem_op =-1;
                	semaphor.sem_flg= 0;

                	/* Anfordern einer Ressource */
                	if(semop(sem_antwortid,&semaphor,1)==-1){
                        	fprintf(stderr,"Error: semaphore (Antworten) konnte nicht dekrementiert werden\n");
                        	exit(-1);
                	}

			shm_antwort->ungelesen=1;
			strcpy(shm_antwort->ergebnis,buf);
			shm_antwort->client=client;
	
			/* Semaphor fuer Antworten freigeben */
			semaphor.sem_op =+1;
                	semaphor.sem_flg=0;

                	/* Freigeben einer Ressource */
                	if(semop(sem_antwortid,&semaphor,1)==-1){
                        	fprintf(stderr,"Error: semaphore (Antworten) konnte nicht inkrementiert werden\n");
                        	exit(-1);
                	}
		}
		else
		  	sleep(2);

	}

	/****************************** Aufraeumen *********************************************/

       	/* Loeschen des Sempahors fuer Anforderungen */
        if(semctl(shm_anfordid ,0 , IPC_RMID)==-1){
                fprintf(stderr,"Error: semaphore (Anforderungen) konnte nicht geloescht werden\n");
                exit(-1);
        }

       	/* Loeschen des Sempahors fuer Antworten */
        if(semctl(shm_antwortid ,0 , IPC_RMID)==-1){
                fprintf(stderr,"Error: semaphore (Antworten) konnte nicht geloescht werden\n");
                exit(-1);
        }

	/* Freigabe des Shared Memories fuer Anforderungen */
	if(shmdt((char *)shm_anford)==-1){
		fprintf(stderr,"Error: shared memory (Anforderungen) konnte nicht freigegeben werden\n");
		exit(-1);
	}

	/* Freigabe des Shared Memories fuer Antworten */
	if(shmdt((char *)shm_antwort)==-1){
		fprintf(stderr,"Error: shared memory (Antworten) konnte nicht freigegeben werden\n");
		exit(-1);
	}

	/* Loeschen des des Shared Memories fuer Anforderungen */
	if(shmctl(shm_anfordid,IPC_RMID,NULL)==-1){
		fprintf(stderr,"Error: shared memory (Anforderungen) konnte nicht geloescht werden\n");
		exit(-1);
	}

	/* Loeschen des des Shared Memories fuer Antworten */
	if(shmctl(shm_antwortid, IPC_RMID, NULL)==-1){
		fprintf(stderr,"Error: shared memory (Antworten) konnte nicht geloescht werden\n");
		exit(-1);
	}
	

	return 0;
}
